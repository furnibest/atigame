{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///D:/project/client_1/furniture-store-nextjs/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///D:/project/client_1/furniture-store-nextjs/src/app/api/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/lib/prisma'\r\nimport { writeFile } from 'fs/promises'\r\nimport { join } from 'path'\r\n\r\nexport async function GET() {\r\n  try {\r\n    const products = await prisma.product.findMany({\r\n      orderBy: {\r\n        createdAt: 'desc'\r\n      }\r\n    })\r\n    return NextResponse.json(products)\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error)\r\n    return NextResponse.json({ error: 'Failed to fetch products' }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const formData = await request.formData()\r\n    const name = formData.get('name') as string\r\n    const description = formData.get('description') as string\r\n    const price = parseFloat(formData.get('price') as string)\r\n    const category = formData.get('category') as string\r\n    const featured = formData.get('featured') === 'true' || formData.get('featured') === '1'\r\n    \r\n    let image = null\r\n    const imageFile = formData.get('image') as File\r\n    \r\n    if (imageFile && imageFile.size > 0) {\r\n      try {\r\n        const bytes = await imageFile.arrayBuffer()\r\n        const buffer = Buffer.from(bytes)\r\n\r\n        // Generate unique filename\r\n        const timestamp = Date.now()\r\n        const filename = `${timestamp}-${imageFile.name.replace(/[^a-zA-Z0-9.-]/g, '_')}`\r\n        \r\n        // Save to public/uploads directory\r\n        const uploadPath = join(process.cwd(), 'public', 'uploads', filename)\r\n        await writeFile(uploadPath, buffer)\r\n        \r\n        // Set the public URL\r\n        image = `/uploads/${filename}`\r\n      } catch (uploadError) {\r\n        console.error('Error uploading file:', uploadError)\r\n        // Continue without image if upload fails\r\n      }\r\n    }\r\n    \r\n    const newProduct = await prisma.product.create({\r\n      data: {\r\n        name,\r\n        description,\r\n        price,\r\n        image,\r\n        category,\r\n        featured\r\n      }\r\n    })\r\n    \r\n    return NextResponse.json(newProduct, { status: 201 })\r\n  } catch (error) {\r\n    console.error('Error creating product:', error)\r\n    return NextResponse.json({ error: 'Failed to create product' }, { status: 500 })\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,SAAS;gBACP,WAAW;YACb;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,cAAc,SAAS,GAAG,CAAC;QACjC,MAAM,QAAQ,WAAW,SAAS,GAAG,CAAC;QACtC,MAAM,WAAW,SAAS,GAAG,CAAC;QAC9B,MAAM,WAAW,SAAS,GAAG,CAAC,gBAAgB,UAAU,SAAS,GAAG,CAAC,gBAAgB;QAErF,IAAI,QAAQ;QACZ,MAAM,YAAY,SAAS,GAAG,CAAC;QAE/B,IAAI,aAAa,UAAU,IAAI,GAAG,GAAG;YACnC,IAAI;gBACF,MAAM,QAAQ,MAAM,UAAU,WAAW;gBACzC,MAAM,SAAS,OAAO,IAAI,CAAC;gBAE3B,2BAA2B;gBAC3B,MAAM,YAAY,KAAK,GAAG;gBAC1B,MAAM,WAAW,GAAG,UAAU,CAAC,EAAE,UAAU,IAAI,CAAC,OAAO,CAAC,mBAAmB,MAAM;gBAEjF,mCAAmC;gBACnC,MAAM,aAAa,CAAA,GAAA,iGAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI,UAAU,WAAW;gBAC5D,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,YAAY;gBAE5B,qBAAqB;gBACrB,QAAQ,CAAC,SAAS,EAAE,UAAU;YAChC,EAAE,OAAO,aAAa;gBACpB,QAAQ,KAAK,CAAC,yBAAyB;YACvC,yCAAyC;YAC3C;QACF;QAEA,MAAM,aAAa,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7C,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF","debugId":null}}]
}